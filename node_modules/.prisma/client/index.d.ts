
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model buku
 */

export type buku = {
  id_buku: number
  judul: string
  pengarang: string
  penerbit: string
  tahun_terbit: string
  isbn: number
  keterangan: string
  foto: string
}

/**
 * Model kategori
 */

export type kategori = {
  id_kategori: number
  nama_kategori: string
}

/**
 * Model pinjaman
 */

export type pinjaman = {
  id_pinjaman: number
  awal_pinjaman: Date
  akhir_pinjaman: Date
  id_buku: number
  id_users: number
}

/**
 * Model users
 */

export type users = {
  id: number
  nama: string
  username: string
  email: string
  password: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Bukus
 * const bukus = await prisma.buku.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Bukus
   * const bukus = await prisma.buku.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.buku`: Exposes CRUD operations for the **buku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bukus
    * const bukus = await prisma.buku.findMany()
    * ```
    */
  get buku(): Prisma.bukuDelegate<GlobalReject>;

  /**
   * `prisma.kategori`: Exposes CRUD operations for the **kategori** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kategoris
    * const kategoris = await prisma.kategori.findMany()
    * ```
    */
  get kategori(): Prisma.kategoriDelegate<GlobalReject>;

  /**
   * `prisma.pinjaman`: Exposes CRUD operations for the **pinjaman** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pinjamen
    * const pinjamen = await prisma.pinjaman.findMany()
    * ```
    */
  get pinjaman(): Prisma.pinjamanDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    buku: 'buku',
    kategori: 'kategori',
    pinjaman: 'pinjaman',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model buku
   */


  export type AggregateBuku = {
    count: BukuCountAggregateOutputType | null
    avg: BukuAvgAggregateOutputType | null
    sum: BukuSumAggregateOutputType | null
    min: BukuMinAggregateOutputType | null
    max: BukuMaxAggregateOutputType | null
  }

  export type BukuAvgAggregateOutputType = {
    id_buku: number
    isbn: number
  }

  export type BukuSumAggregateOutputType = {
    id_buku: number
    isbn: number
  }

  export type BukuMinAggregateOutputType = {
    id_buku: number
    judul: string | null
    pengarang: string | null
    penerbit: string | null
    tahun_terbit: string | null
    isbn: number
    keterangan: string | null
    foto: string | null
  }

  export type BukuMaxAggregateOutputType = {
    id_buku: number
    judul: string | null
    pengarang: string | null
    penerbit: string | null
    tahun_terbit: string | null
    isbn: number
    keterangan: string | null
    foto: string | null
  }

  export type BukuCountAggregateOutputType = {
    id_buku: number
    judul: number | null
    pengarang: number | null
    penerbit: number | null
    tahun_terbit: number | null
    isbn: number
    keterangan: number | null
    foto: number | null
    _all: number
  }


  export type BukuAvgAggregateInputType = {
    id_buku?: true
    isbn?: true
  }

  export type BukuSumAggregateInputType = {
    id_buku?: true
    isbn?: true
  }

  export type BukuMinAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    tahun_terbit?: true
    isbn?: true
    keterangan?: true
    foto?: true
  }

  export type BukuMaxAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    tahun_terbit?: true
    isbn?: true
    keterangan?: true
    foto?: true
  }

  export type BukuCountAggregateInputType = {
    id_buku?: true
    judul?: true
    pengarang?: true
    penerbit?: true
    tahun_terbit?: true
    isbn?: true
    keterangan?: true
    foto?: true
    _all?: true
  }

  export type BukuAggregateArgs = {
    /**
     * Filter which buku to aggregate.
    **/
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
    **/
    orderBy?: Enumerable<bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned bukus
    **/
    count?: true | BukuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: BukuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: BukuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: BukuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: BukuMaxAggregateInputType
  }

  export type GetBukuAggregateType<T extends BukuAggregateArgs> = {
    [P in keyof T & keyof AggregateBuku]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuku[P]>
      : GetScalarType<T[P], AggregateBuku[P]>
  }



  export type bukuSelect = {
    id_buku?: boolean
    judul?: boolean
    pengarang?: boolean
    penerbit?: boolean
    tahun_terbit?: boolean
    isbn?: boolean
    keterangan?: boolean
    foto?: boolean
    pinjaman?: boolean | pinjamanFindManyArgs
  }

  export type bukuInclude = {
    pinjaman?: boolean | pinjamanFindManyArgs
  }

  export type bukuGetPayload<
    S extends boolean | null | undefined | bukuArgs,
    U = keyof S
      > = S extends true
        ? buku
    : S extends undefined
    ? never
    : S extends bukuArgs | bukuFindManyArgs
    ?'include' extends U
    ? buku  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'pinjaman'
        ? Array < pinjamanGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof buku ?buku [P]
  : 
          P extends 'pinjaman'
        ? Array < pinjamanGetPayload<S['select'][P]>>  : never
  } 
    : buku
  : buku


  type bukuCountArgs = Merge<
    Omit<bukuFindManyArgs, 'select' | 'include'> & {
      select?: BukuCountAggregateInputType | true
    }
  >

  export interface bukuDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Buku that matches the filter.
     * @param {bukuFindUniqueArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends bukuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, bukuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'buku'> extends True ? CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>> : CheckSelect<T, Prisma__bukuClient<buku | null >, Prisma__bukuClient<bukuGetPayload<T> | null >>

    /**
     * Find the first Buku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuFindFirstArgs} args - Arguments to find a Buku
     * @example
     * // Get one Buku
     * const buku = await prisma.buku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends bukuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, bukuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'buku'> extends True ? CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>> : CheckSelect<T, Prisma__bukuClient<buku | null >, Prisma__bukuClient<bukuGetPayload<T> | null >>

    /**
     * Find zero or more Bukus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bukus
     * const bukus = await prisma.buku.findMany()
     * 
     * // Get first 10 Bukus
     * const bukus = await prisma.buku.findMany({ take: 10 })
     * 
     * // Only select the `id_buku`
     * const bukuWithId_bukuOnly = await prisma.buku.findMany({ select: { id_buku: true } })
     * 
    **/
    findMany<T extends bukuFindManyArgs>(
      args?: SelectSubset<T, bukuFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<buku>>, PrismaPromise<Array<bukuGetPayload<T>>>>

    /**
     * Create a Buku.
     * @param {bukuCreateArgs} args - Arguments to create a Buku.
     * @example
     * // Create one Buku
     * const Buku = await prisma.buku.create({
     *   data: {
     *     // ... data to create a Buku
     *   }
     * })
     * 
    **/
    create<T extends bukuCreateArgs>(
      args: SelectSubset<T, bukuCreateArgs>
    ): CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>>

    /**
     * Delete a Buku.
     * @param {bukuDeleteArgs} args - Arguments to delete one Buku.
     * @example
     * // Delete one Buku
     * const Buku = await prisma.buku.delete({
     *   where: {
     *     // ... filter to delete one Buku
     *   }
     * })
     * 
    **/
    delete<T extends bukuDeleteArgs>(
      args: SelectSubset<T, bukuDeleteArgs>
    ): CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>>

    /**
     * Update one Buku.
     * @param {bukuUpdateArgs} args - Arguments to update one Buku.
     * @example
     * // Update one Buku
     * const buku = await prisma.buku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends bukuUpdateArgs>(
      args: SelectSubset<T, bukuUpdateArgs>
    ): CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>>

    /**
     * Delete zero or more Bukus.
     * @param {bukuDeleteManyArgs} args - Arguments to filter Bukus to delete.
     * @example
     * // Delete a few Bukus
     * const { count } = await prisma.buku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends bukuDeleteManyArgs>(
      args?: SelectSubset<T, bukuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bukus
     * const buku = await prisma.buku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends bukuUpdateManyArgs>(
      args: SelectSubset<T, bukuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Buku.
     * @param {bukuUpsertArgs} args - Arguments to update or create a Buku.
     * @example
     * // Update or create a Buku
     * const buku = await prisma.buku.upsert({
     *   create: {
     *     // ... data to create a Buku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buku we want to update
     *   }
     * })
    **/
    upsert<T extends bukuUpsertArgs>(
      args: SelectSubset<T, bukuUpsertArgs>
    ): CheckSelect<T, Prisma__bukuClient<buku>, Prisma__bukuClient<bukuGetPayload<T>>>

    /**
     * Count the number of Bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {bukuCountArgs} args - Arguments to filter Bukus to count.
     * @example
     * // Count the number of Bukus
     * const count = await prisma.buku.count({
     *   where: {
     *     // ... the filter for the Bukus we want to count
     *   }
     * })
    **/
    count<T extends bukuCountArgs>(
      args?: Subset<T, bukuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BukuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BukuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BukuAggregateArgs>(args: Subset<T, BukuAggregateArgs>): PrismaPromise<GetBukuAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for buku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__bukuClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pinjaman<T extends pinjamanFindManyArgs = {}>(args?: Subset<T, pinjamanFindManyArgs>): CheckSelect<T, PrismaPromise<Array<pinjaman>>, PrismaPromise<Array<pinjamanGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * buku findUnique
   */
  export type bukuFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * Throw an Error if a buku can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which buku to fetch.
    **/
    where: bukuWhereUniqueInput
  }


  /**
   * buku findFirst
   */
  export type bukuFindFirstArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * Throw an Error if a buku can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which buku to fetch.
    **/
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
    **/
    orderBy?: Enumerable<bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for bukus.
    **/
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of bukus.
    **/
    distinct?: Enumerable<BukuScalarFieldEnum>
  }


  /**
   * buku findMany
   */
  export type bukuFindManyArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * Filter, which bukus to fetch.
    **/
    where?: bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of bukus to fetch.
    **/
    orderBy?: Enumerable<bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing bukus.
    **/
    cursor?: bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` bukus.
    **/
    skip?: number
    distinct?: Enumerable<BukuScalarFieldEnum>
  }


  /**
   * buku create
   */
  export type bukuCreateArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * The data needed to create a buku.
    **/
    data: XOR<bukuCreateInput, bukuUncheckedCreateInput>
  }


  /**
   * buku update
   */
  export type bukuUpdateArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * The data needed to update a buku.
    **/
    data: XOR<bukuUpdateInput, bukuUncheckedUpdateInput>
    /**
     * Choose, which buku to update.
    **/
    where: bukuWhereUniqueInput
  }


  /**
   * buku updateMany
   */
  export type bukuUpdateManyArgs = {
    data: XOR<bukuUpdateManyMutationInput, bukuUncheckedUpdateManyInput>
    where?: bukuWhereInput
  }


  /**
   * buku upsert
   */
  export type bukuUpsertArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * The filter to search for the buku to update in case it exists.
    **/
    where: bukuWhereUniqueInput
    /**
     * In case the buku found by the `where` argument doesn't exist, create a new buku with this data.
    **/
    create: XOR<bukuCreateInput, bukuUncheckedCreateInput>
    /**
     * In case the buku was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<bukuUpdateInput, bukuUncheckedUpdateInput>
  }


  /**
   * buku delete
   */
  export type bukuDeleteArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
    /**
     * Filter which buku to delete.
    **/
    where: bukuWhereUniqueInput
  }


  /**
   * buku deleteMany
   */
  export type bukuDeleteManyArgs = {
    where?: bukuWhereInput
  }


  /**
   * buku without action
   */
  export type bukuArgs = {
    /**
     * Select specific fields to fetch from the buku
    **/
    select?: bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: bukuInclude | null
  }



  /**
   * Model kategori
   */


  export type AggregateKategori = {
    count: KategoriCountAggregateOutputType | null
    avg: KategoriAvgAggregateOutputType | null
    sum: KategoriSumAggregateOutputType | null
    min: KategoriMinAggregateOutputType | null
    max: KategoriMaxAggregateOutputType | null
  }

  export type KategoriAvgAggregateOutputType = {
    id_kategori: number
  }

  export type KategoriSumAggregateOutputType = {
    id_kategori: number
  }

  export type KategoriMinAggregateOutputType = {
    id_kategori: number
    nama_kategori: string | null
  }

  export type KategoriMaxAggregateOutputType = {
    id_kategori: number
    nama_kategori: string | null
  }

  export type KategoriCountAggregateOutputType = {
    id_kategori: number
    nama_kategori: number | null
    _all: number
  }


  export type KategoriAvgAggregateInputType = {
    id_kategori?: true
  }

  export type KategoriSumAggregateInputType = {
    id_kategori?: true
  }

  export type KategoriMinAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
  }

  export type KategoriMaxAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
  }

  export type KategoriCountAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
    _all?: true
  }

  export type KategoriAggregateArgs = {
    /**
     * Filter which kategori to aggregate.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kategoris
    **/
    count?: true | KategoriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: KategoriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: KategoriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: KategoriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: KategoriMaxAggregateInputType
  }

  export type GetKategoriAggregateType<T extends KategoriAggregateArgs> = {
    [P in keyof T & keyof AggregateKategori]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKategori[P]>
      : GetScalarType<T[P], AggregateKategori[P]>
  }



  export type kategoriSelect = {
    id_kategori?: boolean
    nama_kategori?: boolean
  }

  export type kategoriGetPayload<
    S extends boolean | null | undefined | kategoriArgs,
    U = keyof S
      > = S extends true
        ? kategori
    : S extends undefined
    ? never
    : S extends kategoriArgs | kategoriFindManyArgs
    ?'include' extends U
    ? kategori 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof kategori ?kategori [P]
  : 
     never
  } 
    : kategori
  : kategori


  type kategoriCountArgs = Merge<
    Omit<kategoriFindManyArgs, 'select' | 'include'> & {
      select?: KategoriCountAggregateInputType | true
    }
  >

  export interface kategoriDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Kategori that matches the filter.
     * @param {kategoriFindUniqueArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends kategoriFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, kategoriFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'kategori'> extends True ? CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>> : CheckSelect<T, Prisma__kategoriClient<kategori | null >, Prisma__kategoriClient<kategoriGetPayload<T> | null >>

    /**
     * Find the first Kategori that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriFindFirstArgs} args - Arguments to find a Kategori
     * @example
     * // Get one Kategori
     * const kategori = await prisma.kategori.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends kategoriFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, kategoriFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'kategori'> extends True ? CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>> : CheckSelect<T, Prisma__kategoriClient<kategori | null >, Prisma__kategoriClient<kategoriGetPayload<T> | null >>

    /**
     * Find zero or more Kategoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kategoris
     * const kategoris = await prisma.kategori.findMany()
     * 
     * // Get first 10 Kategoris
     * const kategoris = await prisma.kategori.findMany({ take: 10 })
     * 
     * // Only select the `id_kategori`
     * const kategoriWithId_kategoriOnly = await prisma.kategori.findMany({ select: { id_kategori: true } })
     * 
    **/
    findMany<T extends kategoriFindManyArgs>(
      args?: SelectSubset<T, kategoriFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<kategori>>, PrismaPromise<Array<kategoriGetPayload<T>>>>

    /**
     * Create a Kategori.
     * @param {kategoriCreateArgs} args - Arguments to create a Kategori.
     * @example
     * // Create one Kategori
     * const Kategori = await prisma.kategori.create({
     *   data: {
     *     // ... data to create a Kategori
     *   }
     * })
     * 
    **/
    create<T extends kategoriCreateArgs>(
      args: SelectSubset<T, kategoriCreateArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Delete a Kategori.
     * @param {kategoriDeleteArgs} args - Arguments to delete one Kategori.
     * @example
     * // Delete one Kategori
     * const Kategori = await prisma.kategori.delete({
     *   where: {
     *     // ... filter to delete one Kategori
     *   }
     * })
     * 
    **/
    delete<T extends kategoriDeleteArgs>(
      args: SelectSubset<T, kategoriDeleteArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Update one Kategori.
     * @param {kategoriUpdateArgs} args - Arguments to update one Kategori.
     * @example
     * // Update one Kategori
     * const kategori = await prisma.kategori.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends kategoriUpdateArgs>(
      args: SelectSubset<T, kategoriUpdateArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Delete zero or more Kategoris.
     * @param {kategoriDeleteManyArgs} args - Arguments to filter Kategoris to delete.
     * @example
     * // Delete a few Kategoris
     * const { count } = await prisma.kategori.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends kategoriDeleteManyArgs>(
      args?: SelectSubset<T, kategoriDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kategoris
     * const kategori = await prisma.kategori.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends kategoriUpdateManyArgs>(
      args: SelectSubset<T, kategoriUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Kategori.
     * @param {kategoriUpsertArgs} args - Arguments to update or create a Kategori.
     * @example
     * // Update or create a Kategori
     * const kategori = await prisma.kategori.upsert({
     *   create: {
     *     // ... data to create a Kategori
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kategori we want to update
     *   }
     * })
    **/
    upsert<T extends kategoriUpsertArgs>(
      args: SelectSubset<T, kategoriUpsertArgs>
    ): CheckSelect<T, Prisma__kategoriClient<kategori>, Prisma__kategoriClient<kategoriGetPayload<T>>>

    /**
     * Count the number of Kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kategoriCountArgs} args - Arguments to filter Kategoris to count.
     * @example
     * // Count the number of Kategoris
     * const count = await prisma.kategori.count({
     *   where: {
     *     // ... the filter for the Kategoris we want to count
     *   }
     * })
    **/
    count<T extends kategoriCountArgs>(
      args?: Subset<T, kategoriCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KategoriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kategori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KategoriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KategoriAggregateArgs>(args: Subset<T, KategoriAggregateArgs>): PrismaPromise<GetKategoriAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for kategori.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__kategoriClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * kategori findUnique
   */
  export type kategoriFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Throw an Error if a kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kategori to fetch.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori findFirst
   */
  export type kategoriFindFirstArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Throw an Error if a kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which kategori to fetch.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kategoris.
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kategoris.
    **/
    distinct?: Enumerable<KategoriScalarFieldEnum>
  }


  /**
   * kategori findMany
   */
  export type kategoriFindManyArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Filter, which kategoris to fetch.
    **/
    where?: kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kategoris to fetch.
    **/
    orderBy?: Enumerable<kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kategoris.
    **/
    cursor?: kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kategoris.
    **/
    skip?: number
    distinct?: Enumerable<KategoriScalarFieldEnum>
  }


  /**
   * kategori create
   */
  export type kategoriCreateArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The data needed to create a kategori.
    **/
    data: XOR<kategoriCreateInput, kategoriUncheckedCreateInput>
  }


  /**
   * kategori update
   */
  export type kategoriUpdateArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The data needed to update a kategori.
    **/
    data: XOR<kategoriUpdateInput, kategoriUncheckedUpdateInput>
    /**
     * Choose, which kategori to update.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori updateMany
   */
  export type kategoriUpdateManyArgs = {
    data: XOR<kategoriUpdateManyMutationInput, kategoriUncheckedUpdateManyInput>
    where?: kategoriWhereInput
  }


  /**
   * kategori upsert
   */
  export type kategoriUpsertArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * The filter to search for the kategori to update in case it exists.
    **/
    where: kategoriWhereUniqueInput
    /**
     * In case the kategori found by the `where` argument doesn't exist, create a new kategori with this data.
    **/
    create: XOR<kategoriCreateInput, kategoriUncheckedCreateInput>
    /**
     * In case the kategori was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<kategoriUpdateInput, kategoriUncheckedUpdateInput>
  }


  /**
   * kategori delete
   */
  export type kategoriDeleteArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
    /**
     * Filter which kategori to delete.
    **/
    where: kategoriWhereUniqueInput
  }


  /**
   * kategori deleteMany
   */
  export type kategoriDeleteManyArgs = {
    where?: kategoriWhereInput
  }


  /**
   * kategori without action
   */
  export type kategoriArgs = {
    /**
     * Select specific fields to fetch from the kategori
    **/
    select?: kategoriSelect | null
  }



  /**
   * Model pinjaman
   */


  export type AggregatePinjaman = {
    count: PinjamanCountAggregateOutputType | null
    avg: PinjamanAvgAggregateOutputType | null
    sum: PinjamanSumAggregateOutputType | null
    min: PinjamanMinAggregateOutputType | null
    max: PinjamanMaxAggregateOutputType | null
  }

  export type PinjamanAvgAggregateOutputType = {
    id_pinjaman: number
    id_buku: number
    id_users: number
  }

  export type PinjamanSumAggregateOutputType = {
    id_pinjaman: number
    id_buku: number
    id_users: number
  }

  export type PinjamanMinAggregateOutputType = {
    id_pinjaman: number
    awal_pinjaman: Date | null
    akhir_pinjaman: Date | null
    id_buku: number
    id_users: number
  }

  export type PinjamanMaxAggregateOutputType = {
    id_pinjaman: number
    awal_pinjaman: Date | null
    akhir_pinjaman: Date | null
    id_buku: number
    id_users: number
  }

  export type PinjamanCountAggregateOutputType = {
    id_pinjaman: number
    awal_pinjaman: number | null
    akhir_pinjaman: number | null
    id_buku: number
    id_users: number
    _all: number
  }


  export type PinjamanAvgAggregateInputType = {
    id_pinjaman?: true
    id_buku?: true
    id_users?: true
  }

  export type PinjamanSumAggregateInputType = {
    id_pinjaman?: true
    id_buku?: true
    id_users?: true
  }

  export type PinjamanMinAggregateInputType = {
    id_pinjaman?: true
    awal_pinjaman?: true
    akhir_pinjaman?: true
    id_buku?: true
    id_users?: true
  }

  export type PinjamanMaxAggregateInputType = {
    id_pinjaman?: true
    awal_pinjaman?: true
    akhir_pinjaman?: true
    id_buku?: true
    id_users?: true
  }

  export type PinjamanCountAggregateInputType = {
    id_pinjaman?: true
    awal_pinjaman?: true
    akhir_pinjaman?: true
    id_buku?: true
    id_users?: true
    _all?: true
  }

  export type PinjamanAggregateArgs = {
    /**
     * Filter which pinjaman to aggregate.
    **/
    where?: pinjamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pinjamen to fetch.
    **/
    orderBy?: Enumerable<pinjamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: pinjamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pinjamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pinjamen.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pinjamen
    **/
    count?: true | PinjamanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PinjamanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PinjamanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PinjamanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PinjamanMaxAggregateInputType
  }

  export type GetPinjamanAggregateType<T extends PinjamanAggregateArgs> = {
    [P in keyof T & keyof AggregatePinjaman]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePinjaman[P]>
      : GetScalarType<T[P], AggregatePinjaman[P]>
  }



  export type pinjamanSelect = {
    id_pinjaman?: boolean
    awal_pinjaman?: boolean
    akhir_pinjaman?: boolean
    id_buku?: boolean
    id_users?: boolean
    buku?: boolean | bukuArgs
    users?: boolean | usersArgs
  }

  export type pinjamanInclude = {
    buku?: boolean | bukuArgs
    users?: boolean | usersArgs
  }

  export type pinjamanGetPayload<
    S extends boolean | null | undefined | pinjamanArgs,
    U = keyof S
      > = S extends true
        ? pinjaman
    : S extends undefined
    ? never
    : S extends pinjamanArgs | pinjamanFindManyArgs
    ?'include' extends U
    ? pinjaman  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'buku'
        ? bukuGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof pinjaman ?pinjaman [P]
  : 
          P extends 'buku'
        ? bukuGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : pinjaman
  : pinjaman


  type pinjamanCountArgs = Merge<
    Omit<pinjamanFindManyArgs, 'select' | 'include'> & {
      select?: PinjamanCountAggregateInputType | true
    }
  >

  export interface pinjamanDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pinjaman that matches the filter.
     * @param {pinjamanFindUniqueArgs} args - Arguments to find a Pinjaman
     * @example
     * // Get one Pinjaman
     * const pinjaman = await prisma.pinjaman.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pinjamanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pinjamanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pinjaman'> extends True ? CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>> : CheckSelect<T, Prisma__pinjamanClient<pinjaman | null >, Prisma__pinjamanClient<pinjamanGetPayload<T> | null >>

    /**
     * Find the first Pinjaman that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pinjamanFindFirstArgs} args - Arguments to find a Pinjaman
     * @example
     * // Get one Pinjaman
     * const pinjaman = await prisma.pinjaman.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pinjamanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pinjamanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pinjaman'> extends True ? CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>> : CheckSelect<T, Prisma__pinjamanClient<pinjaman | null >, Prisma__pinjamanClient<pinjamanGetPayload<T> | null >>

    /**
     * Find zero or more Pinjamen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pinjamanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pinjamen
     * const pinjamen = await prisma.pinjaman.findMany()
     * 
     * // Get first 10 Pinjamen
     * const pinjamen = await prisma.pinjaman.findMany({ take: 10 })
     * 
     * // Only select the `id_pinjaman`
     * const pinjamanWithId_pinjamanOnly = await prisma.pinjaman.findMany({ select: { id_pinjaman: true } })
     * 
    **/
    findMany<T extends pinjamanFindManyArgs>(
      args?: SelectSubset<T, pinjamanFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<pinjaman>>, PrismaPromise<Array<pinjamanGetPayload<T>>>>

    /**
     * Create a Pinjaman.
     * @param {pinjamanCreateArgs} args - Arguments to create a Pinjaman.
     * @example
     * // Create one Pinjaman
     * const Pinjaman = await prisma.pinjaman.create({
     *   data: {
     *     // ... data to create a Pinjaman
     *   }
     * })
     * 
    **/
    create<T extends pinjamanCreateArgs>(
      args: SelectSubset<T, pinjamanCreateArgs>
    ): CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>>

    /**
     * Delete a Pinjaman.
     * @param {pinjamanDeleteArgs} args - Arguments to delete one Pinjaman.
     * @example
     * // Delete one Pinjaman
     * const Pinjaman = await prisma.pinjaman.delete({
     *   where: {
     *     // ... filter to delete one Pinjaman
     *   }
     * })
     * 
    **/
    delete<T extends pinjamanDeleteArgs>(
      args: SelectSubset<T, pinjamanDeleteArgs>
    ): CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>>

    /**
     * Update one Pinjaman.
     * @param {pinjamanUpdateArgs} args - Arguments to update one Pinjaman.
     * @example
     * // Update one Pinjaman
     * const pinjaman = await prisma.pinjaman.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pinjamanUpdateArgs>(
      args: SelectSubset<T, pinjamanUpdateArgs>
    ): CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>>

    /**
     * Delete zero or more Pinjamen.
     * @param {pinjamanDeleteManyArgs} args - Arguments to filter Pinjamen to delete.
     * @example
     * // Delete a few Pinjamen
     * const { count } = await prisma.pinjaman.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pinjamanDeleteManyArgs>(
      args?: SelectSubset<T, pinjamanDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pinjamen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pinjamanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pinjamen
     * const pinjaman = await prisma.pinjaman.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pinjamanUpdateManyArgs>(
      args: SelectSubset<T, pinjamanUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pinjaman.
     * @param {pinjamanUpsertArgs} args - Arguments to update or create a Pinjaman.
     * @example
     * // Update or create a Pinjaman
     * const pinjaman = await prisma.pinjaman.upsert({
     *   create: {
     *     // ... data to create a Pinjaman
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pinjaman we want to update
     *   }
     * })
    **/
    upsert<T extends pinjamanUpsertArgs>(
      args: SelectSubset<T, pinjamanUpsertArgs>
    ): CheckSelect<T, Prisma__pinjamanClient<pinjaman>, Prisma__pinjamanClient<pinjamanGetPayload<T>>>

    /**
     * Count the number of Pinjamen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pinjamanCountArgs} args - Arguments to filter Pinjamen to count.
     * @example
     * // Count the number of Pinjamen
     * const count = await prisma.pinjaman.count({
     *   where: {
     *     // ... the filter for the Pinjamen we want to count
     *   }
     * })
    **/
    count<T extends pinjamanCountArgs>(
      args?: Subset<T, pinjamanCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PinjamanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pinjaman.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PinjamanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PinjamanAggregateArgs>(args: Subset<T, PinjamanAggregateArgs>): PrismaPromise<GetPinjamanAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for pinjaman.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pinjamanClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    buku<T extends bukuArgs = {}>(args?: Subset<T, bukuArgs>): CheckSelect<T, Prisma__bukuClient<buku | null >, Prisma__bukuClient<bukuGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pinjaman findUnique
   */
  export type pinjamanFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * Throw an Error if a pinjaman can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pinjaman to fetch.
    **/
    where: pinjamanWhereUniqueInput
  }


  /**
   * pinjaman findFirst
   */
  export type pinjamanFindFirstArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * Throw an Error if a pinjaman can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pinjaman to fetch.
    **/
    where?: pinjamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pinjamen to fetch.
    **/
    orderBy?: Enumerable<pinjamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pinjamen.
    **/
    cursor?: pinjamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pinjamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pinjamen.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pinjamen.
    **/
    distinct?: Enumerable<PinjamanScalarFieldEnum>
  }


  /**
   * pinjaman findMany
   */
  export type pinjamanFindManyArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * Filter, which pinjamen to fetch.
    **/
    where?: pinjamanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pinjamen to fetch.
    **/
    orderBy?: Enumerable<pinjamanOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pinjamen.
    **/
    cursor?: pinjamanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pinjamen from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pinjamen.
    **/
    skip?: number
    distinct?: Enumerable<PinjamanScalarFieldEnum>
  }


  /**
   * pinjaman create
   */
  export type pinjamanCreateArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * The data needed to create a pinjaman.
    **/
    data: XOR<pinjamanCreateInput, pinjamanUncheckedCreateInput>
  }


  /**
   * pinjaman update
   */
  export type pinjamanUpdateArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * The data needed to update a pinjaman.
    **/
    data: XOR<pinjamanUpdateInput, pinjamanUncheckedUpdateInput>
    /**
     * Choose, which pinjaman to update.
    **/
    where: pinjamanWhereUniqueInput
  }


  /**
   * pinjaman updateMany
   */
  export type pinjamanUpdateManyArgs = {
    data: XOR<pinjamanUpdateManyMutationInput, pinjamanUncheckedUpdateManyInput>
    where?: pinjamanWhereInput
  }


  /**
   * pinjaman upsert
   */
  export type pinjamanUpsertArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * The filter to search for the pinjaman to update in case it exists.
    **/
    where: pinjamanWhereUniqueInput
    /**
     * In case the pinjaman found by the `where` argument doesn't exist, create a new pinjaman with this data.
    **/
    create: XOR<pinjamanCreateInput, pinjamanUncheckedCreateInput>
    /**
     * In case the pinjaman was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<pinjamanUpdateInput, pinjamanUncheckedUpdateInput>
  }


  /**
   * pinjaman delete
   */
  export type pinjamanDeleteArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
    /**
     * Filter which pinjaman to delete.
    **/
    where: pinjamanWhereUniqueInput
  }


  /**
   * pinjaman deleteMany
   */
  export type pinjamanDeleteManyArgs = {
    where?: pinjamanWhereInput
  }


  /**
   * pinjaman without action
   */
  export type pinjamanArgs = {
    /**
     * Select specific fields to fetch from the pinjaman
    **/
    select?: pinjamanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: pinjamanInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number
  }

  export type UsersSumAggregateOutputType = {
    id: number
  }

  export type UsersMinAggregateOutputType = {
    id: number
    nama: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number
    nama: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    nama: number | null
    username: number | null
    email: number | null
    password: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    nama?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }



  export type usersSelect = {
    id?: boolean
    nama?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    pinjaman?: boolean | pinjamanFindManyArgs
  }

  export type usersInclude = {
    pinjaman?: boolean | pinjamanFindManyArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'pinjaman'
        ? Array < pinjamanGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'pinjaman'
        ? Array < pinjamanGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    pinjaman<T extends pinjamanFindManyArgs = {}>(args?: Subset<T, pinjamanFindManyArgs>): CheckSelect<T, PrismaPromise<Array<pinjaman>>, PrismaPromise<Array<pinjamanGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BukuScalarFieldEnum: {
    id_buku: 'id_buku',
    judul: 'judul',
    pengarang: 'pengarang',
    penerbit: 'penerbit',
    tahun_terbit: 'tahun_terbit',
    isbn: 'isbn',
    keterangan: 'keterangan',
    foto: 'foto'
  };

  export type BukuScalarFieldEnum = (typeof BukuScalarFieldEnum)[keyof typeof BukuScalarFieldEnum]


  export const KategoriScalarFieldEnum: {
    id_kategori: 'id_kategori',
    nama_kategori: 'nama_kategori'
  };

  export type KategoriScalarFieldEnum = (typeof KategoriScalarFieldEnum)[keyof typeof KategoriScalarFieldEnum]


  export const PinjamanScalarFieldEnum: {
    id_pinjaman: 'id_pinjaman',
    awal_pinjaman: 'awal_pinjaman',
    akhir_pinjaman: 'akhir_pinjaman',
    id_buku: 'id_buku',
    id_users: 'id_users'
  };

  export type PinjamanScalarFieldEnum = (typeof PinjamanScalarFieldEnum)[keyof typeof PinjamanScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type bukuWhereInput = {
    AND?: Enumerable<bukuWhereInput>
    OR?: Enumerable<bukuWhereInput>
    NOT?: Enumerable<bukuWhereInput>
    id_buku?: IntFilter | number
    judul?: StringFilter | string
    pengarang?: StringFilter | string
    penerbit?: StringFilter | string
    tahun_terbit?: StringFilter | string
    isbn?: IntFilter | number
    keterangan?: StringFilter | string
    foto?: StringFilter | string
    pinjaman?: PinjamanListRelationFilter
  }

  export type bukuOrderByInput = {
    id_buku?: SortOrder
    judul?: SortOrder
    pengarang?: SortOrder
    penerbit?: SortOrder
    tahun_terbit?: SortOrder
    isbn?: SortOrder
    keterangan?: SortOrder
    foto?: SortOrder
  }

  export type bukuWhereUniqueInput = {
    id_buku?: number
  }

  export type kategoriWhereInput = {
    AND?: Enumerable<kategoriWhereInput>
    OR?: Enumerable<kategoriWhereInput>
    NOT?: Enumerable<kategoriWhereInput>
    id_kategori?: IntFilter | number
    nama_kategori?: StringFilter | string
  }

  export type kategoriOrderByInput = {
    id_kategori?: SortOrder
    nama_kategori?: SortOrder
  }

  export type kategoriWhereUniqueInput = {
    id_kategori?: number
  }

  export type pinjamanWhereInput = {
    AND?: Enumerable<pinjamanWhereInput>
    OR?: Enumerable<pinjamanWhereInput>
    NOT?: Enumerable<pinjamanWhereInput>
    id_pinjaman?: IntFilter | number
    awal_pinjaman?: DateTimeFilter | Date | string
    akhir_pinjaman?: DateTimeFilter | Date | string
    id_buku?: IntFilter | number
    id_users?: IntFilter | number
    buku?: XOR<BukuRelationFilter, bukuWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type pinjamanOrderByInput = {
    id_pinjaman?: SortOrder
    awal_pinjaman?: SortOrder
    akhir_pinjaman?: SortOrder
    id_buku?: SortOrder
    id_users?: SortOrder
    buku?: bukuOrderByInput
    users?: usersOrderByInput
  }

  export type pinjamanWhereUniqueInput = {
    id_pinjaman?: number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    nama?: StringFilter | string
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    pinjaman?: PinjamanListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    nama?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
  }

  export type bukuCreateInput = {
    judul: string
    pengarang: string
    penerbit: string
    tahun_terbit: string
    isbn: number
    keterangan: string
    foto: string
    pinjaman?: pinjamanCreateNestedManyWithoutBukuInput
  }

  export type bukuUncheckedCreateInput = {
    id_buku?: number
    judul: string
    pengarang: string
    penerbit: string
    tahun_terbit: string
    isbn: number
    keterangan: string
    foto: string
    pinjaman?: pinjamanUncheckedCreateNestedManyWithoutBukuInput
  }

  export type bukuUpdateInput = {
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    pinjaman?: pinjamanUpdateManyWithoutBukuInput
  }

  export type bukuUncheckedUpdateInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    pinjaman?: pinjamanUncheckedUpdateManyWithoutBukuInput
  }

  export type bukuUpdateManyMutationInput = {
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type bukuUncheckedUpdateManyInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriCreateInput = {
    nama_kategori: string
  }

  export type kategoriUncheckedCreateInput = {
    id_kategori?: number
    nama_kategori: string
  }

  export type kategoriUpdateInput = {
    nama_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUncheckedUpdateInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    nama_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUpdateManyMutationInput = {
    nama_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type kategoriUncheckedUpdateManyInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    nama_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type pinjamanCreateInput = {
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    buku: bukuCreateNestedOneWithoutPinjamanInput
    users: usersCreateNestedOneWithoutPinjamanInput
  }

  export type pinjamanUncheckedCreateInput = {
    id_pinjaman?: number
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    id_buku: number
    id_users: number
  }

  export type pinjamanUpdateInput = {
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    buku?: bukuUpdateOneRequiredWithoutPinjamanInput
    users?: usersUpdateOneRequiredWithoutPinjamanInput
  }

  export type pinjamanUncheckedUpdateInput = {
    id_pinjaman?: IntFieldUpdateOperationsInput | number
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    id_buku?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type pinjamanUpdateManyMutationInput = {
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pinjamanUncheckedUpdateManyInput = {
    id_pinjaman?: IntFieldUpdateOperationsInput | number
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    id_buku?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    nama: string
    username: string
    email: string
    password: string
    pinjaman?: pinjamanCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    nama: string
    username: string
    email: string
    password: string
    pinjaman?: pinjamanUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pinjaman?: pinjamanUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pinjaman?: pinjamanUncheckedUpdateManyWithoutUsersInput
  }

  export type usersUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type PinjamanListRelationFilter = {
    every?: pinjamanWhereInput
    some?: pinjamanWhereInput
    none?: pinjamanWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BukuRelationFilter = {
    is?: bukuWhereInput
    isNot?: bukuWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type pinjamanCreateNestedManyWithoutBukuInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutBukuInput>, Enumerable<pinjamanUncheckedCreateWithoutBukuInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutBukuInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
  }

  export type pinjamanUncheckedCreateNestedManyWithoutBukuInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutBukuInput>, Enumerable<pinjamanUncheckedCreateWithoutBukuInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutBukuInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type pinjamanUpdateManyWithoutBukuInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutBukuInput>, Enumerable<pinjamanUncheckedCreateWithoutBukuInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutBukuInput>
    upsert?: Enumerable<pinjamanUpsertWithWhereUniqueWithoutBukuInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
    set?: Enumerable<pinjamanWhereUniqueInput>
    disconnect?: Enumerable<pinjamanWhereUniqueInput>
    delete?: Enumerable<pinjamanWhereUniqueInput>
    update?: Enumerable<pinjamanUpdateWithWhereUniqueWithoutBukuInput>
    updateMany?: Enumerable<pinjamanUpdateManyWithWhereWithoutBukuInput>
    deleteMany?: Enumerable<pinjamanScalarWhereInput>
  }

  export type pinjamanUncheckedUpdateManyWithoutBukuInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutBukuInput>, Enumerable<pinjamanUncheckedCreateWithoutBukuInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutBukuInput>
    upsert?: Enumerable<pinjamanUpsertWithWhereUniqueWithoutBukuInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
    set?: Enumerable<pinjamanWhereUniqueInput>
    disconnect?: Enumerable<pinjamanWhereUniqueInput>
    delete?: Enumerable<pinjamanWhereUniqueInput>
    update?: Enumerable<pinjamanUpdateWithWhereUniqueWithoutBukuInput>
    updateMany?: Enumerable<pinjamanUpdateManyWithWhereWithoutBukuInput>
    deleteMany?: Enumerable<pinjamanScalarWhereInput>
  }

  export type bukuCreateNestedOneWithoutPinjamanInput = {
    create?: XOR<bukuCreateWithoutPinjamanInput, bukuUncheckedCreateWithoutPinjamanInput>
    connectOrCreate?: bukuCreateOrConnectWithoutPinjamanInput
    connect?: bukuWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutPinjamanInput = {
    create?: XOR<usersCreateWithoutPinjamanInput, usersUncheckedCreateWithoutPinjamanInput>
    connectOrCreate?: usersCreateOrConnectWithoutPinjamanInput
    connect?: usersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type bukuUpdateOneRequiredWithoutPinjamanInput = {
    create?: XOR<bukuCreateWithoutPinjamanInput, bukuUncheckedCreateWithoutPinjamanInput>
    connectOrCreate?: bukuCreateOrConnectWithoutPinjamanInput
    upsert?: bukuUpsertWithoutPinjamanInput
    connect?: bukuWhereUniqueInput
    update?: XOR<bukuUpdateWithoutPinjamanInput, bukuUncheckedUpdateWithoutPinjamanInput>
  }

  export type usersUpdateOneRequiredWithoutPinjamanInput = {
    create?: XOR<usersCreateWithoutPinjamanInput, usersUncheckedCreateWithoutPinjamanInput>
    connectOrCreate?: usersCreateOrConnectWithoutPinjamanInput
    upsert?: usersUpsertWithoutPinjamanInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutPinjamanInput, usersUncheckedUpdateWithoutPinjamanInput>
  }

  export type pinjamanCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutUsersInput>, Enumerable<pinjamanUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
  }

  export type pinjamanUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutUsersInput>, Enumerable<pinjamanUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
  }

  export type pinjamanUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutUsersInput>, Enumerable<pinjamanUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<pinjamanUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
    set?: Enumerable<pinjamanWhereUniqueInput>
    disconnect?: Enumerable<pinjamanWhereUniqueInput>
    delete?: Enumerable<pinjamanWhereUniqueInput>
    update?: Enumerable<pinjamanUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<pinjamanUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<pinjamanScalarWhereInput>
  }

  export type pinjamanUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<pinjamanCreateWithoutUsersInput>, Enumerable<pinjamanUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<pinjamanCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<pinjamanUpsertWithWhereUniqueWithoutUsersInput>
    connect?: Enumerable<pinjamanWhereUniqueInput>
    set?: Enumerable<pinjamanWhereUniqueInput>
    disconnect?: Enumerable<pinjamanWhereUniqueInput>
    delete?: Enumerable<pinjamanWhereUniqueInput>
    update?: Enumerable<pinjamanUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<pinjamanUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<pinjamanScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type pinjamanCreateWithoutBukuInput = {
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    users: usersCreateNestedOneWithoutPinjamanInput
  }

  export type pinjamanUncheckedCreateWithoutBukuInput = {
    id_pinjaman?: number
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    id_users: number
  }

  export type pinjamanCreateOrConnectWithoutBukuInput = {
    where: pinjamanWhereUniqueInput
    create: XOR<pinjamanCreateWithoutBukuInput, pinjamanUncheckedCreateWithoutBukuInput>
  }

  export type pinjamanUpsertWithWhereUniqueWithoutBukuInput = {
    where: pinjamanWhereUniqueInput
    update: XOR<pinjamanUpdateWithoutBukuInput, pinjamanUncheckedUpdateWithoutBukuInput>
    create: XOR<pinjamanCreateWithoutBukuInput, pinjamanUncheckedCreateWithoutBukuInput>
  }

  export type pinjamanUpdateWithWhereUniqueWithoutBukuInput = {
    where: pinjamanWhereUniqueInput
    data: XOR<pinjamanUpdateWithoutBukuInput, pinjamanUncheckedUpdateWithoutBukuInput>
  }

  export type pinjamanUpdateManyWithWhereWithoutBukuInput = {
    where: pinjamanScalarWhereInput
    data: XOR<pinjamanUpdateManyMutationInput, pinjamanUncheckedUpdateManyWithoutPinjamanInput>
  }

  export type pinjamanScalarWhereInput = {
    AND?: Enumerable<pinjamanScalarWhereInput>
    OR?: Enumerable<pinjamanScalarWhereInput>
    NOT?: Enumerable<pinjamanScalarWhereInput>
    id_pinjaman?: IntFilter | number
    awal_pinjaman?: DateTimeFilter | Date | string
    akhir_pinjaman?: DateTimeFilter | Date | string
    id_buku?: IntFilter | number
    id_users?: IntFilter | number
  }

  export type bukuCreateWithoutPinjamanInput = {
    judul: string
    pengarang: string
    penerbit: string
    tahun_terbit: string
    isbn: number
    keterangan: string
    foto: string
  }

  export type bukuUncheckedCreateWithoutPinjamanInput = {
    id_buku?: number
    judul: string
    pengarang: string
    penerbit: string
    tahun_terbit: string
    isbn: number
    keterangan: string
    foto: string
  }

  export type bukuCreateOrConnectWithoutPinjamanInput = {
    where: bukuWhereUniqueInput
    create: XOR<bukuCreateWithoutPinjamanInput, bukuUncheckedCreateWithoutPinjamanInput>
  }

  export type usersCreateWithoutPinjamanInput = {
    nama: string
    username: string
    email: string
    password: string
  }

  export type usersUncheckedCreateWithoutPinjamanInput = {
    id?: number
    nama: string
    username: string
    email: string
    password: string
  }

  export type usersCreateOrConnectWithoutPinjamanInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPinjamanInput, usersUncheckedCreateWithoutPinjamanInput>
  }

  export type bukuUpsertWithoutPinjamanInput = {
    update: XOR<bukuUpdateWithoutPinjamanInput, bukuUncheckedUpdateWithoutPinjamanInput>
    create: XOR<bukuCreateWithoutPinjamanInput, bukuUncheckedCreateWithoutPinjamanInput>
  }

  export type bukuUpdateWithoutPinjamanInput = {
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type bukuUncheckedUpdateWithoutPinjamanInput = {
    id_buku?: IntFieldUpdateOperationsInput | number
    judul?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    penerbit?: StringFieldUpdateOperationsInput | string
    tahun_terbit?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    keterangan?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutPinjamanInput = {
    update: XOR<usersUpdateWithoutPinjamanInput, usersUncheckedUpdateWithoutPinjamanInput>
    create: XOR<usersCreateWithoutPinjamanInput, usersUncheckedCreateWithoutPinjamanInput>
  }

  export type usersUpdateWithoutPinjamanInput = {
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutPinjamanInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type pinjamanCreateWithoutUsersInput = {
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    buku: bukuCreateNestedOneWithoutPinjamanInput
  }

  export type pinjamanUncheckedCreateWithoutUsersInput = {
    id_pinjaman?: number
    awal_pinjaman: Date | string
    akhir_pinjaman: Date | string
    id_buku: number
  }

  export type pinjamanCreateOrConnectWithoutUsersInput = {
    where: pinjamanWhereUniqueInput
    create: XOR<pinjamanCreateWithoutUsersInput, pinjamanUncheckedCreateWithoutUsersInput>
  }

  export type pinjamanUpsertWithWhereUniqueWithoutUsersInput = {
    where: pinjamanWhereUniqueInput
    update: XOR<pinjamanUpdateWithoutUsersInput, pinjamanUncheckedUpdateWithoutUsersInput>
    create: XOR<pinjamanCreateWithoutUsersInput, pinjamanUncheckedCreateWithoutUsersInput>
  }

  export type pinjamanUpdateWithWhereUniqueWithoutUsersInput = {
    where: pinjamanWhereUniqueInput
    data: XOR<pinjamanUpdateWithoutUsersInput, pinjamanUncheckedUpdateWithoutUsersInput>
  }

  export type pinjamanUpdateManyWithWhereWithoutUsersInput = {
    where: pinjamanScalarWhereInput
    data: XOR<pinjamanUpdateManyMutationInput, pinjamanUncheckedUpdateManyWithoutPinjamanInput>
  }

  export type pinjamanUpdateWithoutBukuInput = {
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutPinjamanInput
  }

  export type pinjamanUncheckedUpdateWithoutBukuInput = {
    id_pinjaman?: IntFieldUpdateOperationsInput | number
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type pinjamanUncheckedUpdateManyWithoutPinjamanInput = {
    id_pinjaman?: IntFieldUpdateOperationsInput | number
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type pinjamanUpdateWithoutUsersInput = {
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    buku?: bukuUpdateOneRequiredWithoutPinjamanInput
  }

  export type pinjamanUncheckedUpdateWithoutUsersInput = {
    id_pinjaman?: IntFieldUpdateOperationsInput | number
    awal_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    akhir_pinjaman?: DateTimeFieldUpdateOperationsInput | Date | string
    id_buku?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}